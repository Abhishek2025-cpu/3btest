const SubAdmin = require('../models/SubAdmin');
const gcs = require('../utils/gcloud'); // Your GCS utility

// @desc    Register a new sub-admin
// @route   POST /api/subadmins/register
exports.registerSubAdmin = async (req, res) => {
  try {
    const { name, email, phone, dob, address } = req.body;

    if (!req.file) {
      return res.status(400).json({ message: 'Verification document is required.' });
    }

    const existingSubAdmin = await SubAdmin.findOne({ $or: [{ email }, { phone }] });
    if (existingSubAdmin) {
      return res.status(400).json({ message: 'Sub-admin with this Email or Phone already exists.' });
    }
    
    // Auto-generate password
    const yearOfBirth = new Date(dob).getFullYear();
    if (!yearOfBirth || isNaN(yearOfBirth)) {
        return res.status(400).json({ message: 'Invalid Date of Birth format.' });
    }
    const nameInitials = name.substring(0, 4).toLowerCase();
    const autoGeneratedPassword = `3B${nameInitials}@${yearOfBirth}`;

    // Upload verification document to GCS
    const uploadResult = await gcs.uploadBufferToGCS(
      req.file.buffer, req.file.originalname, 'verification-documents', req.file.mimetype
    );

    const subAdmin = await SubAdmin.create({
      name, email, phone, dob, address,
      password: autoGeneratedPassword, // Password will be hashed by the pre-save hook
      verificationDocument: { url: uploadResult.url, id: uploadResult.id },
    });
    
    // IMPORTANT: Respond with the generated password so the main admin can share it
    res.status(201).json({
        message: "Sub-admin created successfully",
        autoGeneratedPassword,
        subAdminData: subAdmin
    });
  } catch (error) {
    res.status(500).json({ message: 'Server Error', error: error.message });
  }
};

// @desc    Authenticate a sub-admin & get their profile
// @route   POST /api/subadmins/login
exports.loginSubAdmin = async (req, res) => {
  try {
    const { email, password } = req.body;

    const subAdmin = await SubAdmin.findOne({ email }).select('+password');

    if (subAdmin && (await subAdmin.matchPassword(password))) {
      // Password matches, send back profile data (excluding password)
      const userProfile = subAdmin.toObject();
      delete userProfile.password;
      res.status(200).json(userProfile);
    } else {
      res.status(401).json({ message: 'Invalid email or password' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Server Error', error: error.message });
  }
};

// @desc    Get all sub-admins
// @route   GET /api/subadmins/
exports.getAllSubAdmins = async (req, res) => {
  try {
    const subAdmins = await SubAdmin.find({}).sort({ createdAt: -1 });
    res.status(200).json(subAdmins);
  } catch (error) {
    res.status(500).json({ message: 'Server Error', error: error.message });
  }
};

// @desc    Get a single sub-admin by their database _id
// @route   GET /api/subadmins/:id
exports.getSubAdminById = async (req, res) => {
  try {
    const subAdmin = await SubAdmin.findById(req.params.id);
    if (!subAdmin) {
      return res.status(404).json({ message: 'Sub-admin not found.' });
    }
    res.status(200).json(subAdmin);
  } catch (error) {
    res.status(500).json({ message: 'Server Error', error: error.message });
  }
};

// @desc    Update sub-admin profile details
// @route   PUT /api/subadmins/:id
exports.updateSubAdmin = async (req, res) => {
  try {
    const subAdmin = await SubAdmin.findById(req.params.id);
    if (!subAdmin) {
      return res.status(404).json({ message: 'Sub-admin not found.' });
    }

    if (req.file) {
      if (subAdmin.profilePicture && subAdmin.profilePicture.id) {
        await gcs.deleteFileFromGCS(subAdmin.profilePicture.id);
      }
      const uploadResult = await gcs.uploadBufferToGCS(
        req.file.buffer, req.file.originalname, 'profile-pictures', req.file.mimetype
      );
      subAdmin.profilePicture = { url: uploadResult.url, id: uploadResult.id };
    }

    subAdmin.name = req.body.name || subAdmin.name;
    subAdmin.phone = req.body.phone || subAdmin.phone;
    subAdmin.dob = req.body.dob || subAdmin.dob;
    subAdmin.address = req.body.address || subAdmin.address;
    
    // Logic to update password if provided
    if (req.body.password) {
        subAdmin.password = req.body.password;
    }

    const updatedSubAdmin = await subAdmin.save();
    res.status(200).json(updatedSubAdmin);
  } catch (error) {
    res.status(500).json({ message: 'Server Error', error: error.message });
  }
};

// @desc    Update a sub-admin's status
// @route   PATCH /api/subadmins/:id/status
exports.updateSubAdminStatus = async (req, res) => {
  try {
    const { status } = req.body;
    if (!['active', 'inactive'].includes(status)) {
      return res.status(400).json({ message: "Status must be 'active' or 'inactive'." });
    }

    const subAdmin = await SubAdmin.findByIdAndUpdate(req.params.id, { status }, { new: true });
    if (!subAdmin) { return res.status(404).json({ message: 'Sub-admin not found.' }); }
    res.status(200).json(subAdmin);
  } catch (error) {
    res.status(500).json({ message: 'Server Error', error: error.message });
  }
};

// @desc    Delete a sub-admin
// @route   DELETE /api/subadmins/:id
exports.deleteSubAdmin = async (req, res) => {
  try {
    const subAdmin = await SubAdmin.findById(req.params.id);
    if (!subAdmin) { return res.status(404).json({ message: 'Sub-admin not found.' }); }

    const deletionPromises = [];
    if (subAdmin.verificationDocument && subAdmin.verificationDocument.id) {
      deletionPromises.push(gcs.deleteFileFromGCS(subAdmin.verificationDocument.id));
    }
    if (subAdmin.profilePicture && subAdmin.profilePicture.id) {
      deletionPromises.push(gcs.deleteFileFromGCS(subAdmin.profilePicture.id));
    }

    await Promise.all(deletionPromises);
    await subAdmin.deleteOne();

    res.status(200).json({ message: 'Sub-admin and associated files deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Server Error', error: error.message });
  }
};